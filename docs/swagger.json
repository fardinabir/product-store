{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Title: Product Store\nDescription: API documentation for Product Store service.",
    "title": "swagger: \"2.0\"\ninfo:",
    "version": "1.0.0"
  },
  "host": "localhost:8085",
  "basePath": "/api",
  "paths": {
    "/brands/": {
      "get": {
        "description": "For getting the list of all the brands, shows both active and inactive brands",
        "tags": [
          "Brands"
        ],
        "operationId": "GetBrands",
        "responses": {
          "200": {
            "$ref": "#/responses/SuccessRespBrands"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/brands/new": {
      "post": {
        "description": "For creating new brand entry",
        "tags": [
          "Brands"
        ],
        "operationId": "CreateBrand",
        "parameters": [
          {
            "description": "The request body for adding a brand.",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrandReq"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BrandSuccessResp200"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/brands/{id}": {
      "get": {
        "description": "Get's the specific brand of given brand id",
        "tags": [
          "Brands"
        ],
        "operationId": "GetBrandsById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "description": "The id of the brands, categories, suppliers",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BrandSuccessResp200"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "For deleting existing brand",
        "tags": [
          "Brands"
        ],
        "operationId": "DeleteBrand",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "description": "The id of the brands, categories, suppliers",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "description": "Updates existing brand entry",
        "tags": [
          "Brands"
        ],
        "operationId": "UpdateBrand",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "description": "path id for updating brand",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "The request body for adding a brand.",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrandReq"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/BrandSuccessResp200"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/categories/": {
      "get": {
        "description": "For getting the list of all the categories, shows both active and inactive categories",
        "tags": [
          "Categories"
        ],
        "operationId": "GetCategories",
        "responses": {
          "200": {
            "$ref": "#/responses/SuccessRespCategories"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/categories/get-tree": {
      "get": {
        "description": "For getting the tree of all the categories, shows both active and inactive categories",
        "tags": [
          "Categories"
        ],
        "operationId": "GetCategoriesTree",
        "responses": {
          "200": {
            "$ref": "#/responses/CategoryTreeResp"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/categories/new": {
      "post": {
        "description": "For creating new category entry",
        "tags": [
          "Categories"
        ],
        "operationId": "CreateCategory",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryReq"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CategorySuccessResp200"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "description": "Gets the specific category of given category id",
        "tags": [
          "Categories"
        ],
        "operationId": "GetCategoryById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "description": "The id of the brands, categories, suppliers",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CategorySuccessResp200"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "For deleting existing category",
        "tags": [
          "Categories"
        ],
        "operationId": "DeleteCategory",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "description": "The id of the brands, categories, suppliers",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "description": "Updates existing category entry",
        "tags": [
          "Categories"
        ],
        "operationId": "UpdateCategory",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "description": "path id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryReq"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CategorySuccessResp200"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/products/": {
      "get": {
        "description": "For getting the list of all the products, is filterable by fields",
        "tags": [
          "Products"
        ],
        "operationId": "GetProducts",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Brand",
            "name": "brand",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Category",
            "name": "category",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Supplier",
            "name": "supplier",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "ProductName",
            "name": "product_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SuccessRespProducts"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/products/new": {
      "post": {
        "description": "For creating new product entry",
        "tags": [
          "Products"
        ],
        "operationId": "CreateProduct",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductReq"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProductSuccessResp200"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "description": "Gets the specific product of given product id",
        "tags": [
          "Products"
        ],
        "operationId": "GetProductById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "description": "The id of the brands, categories, suppliers",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProductSuccessResp200"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "For deleting existing product",
        "tags": [
          "Products"
        ],
        "operationId": "DeleteProduct",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "description": "The id of the brands, categories, suppliers",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "description": "Updates existing product entry",
        "tags": [
          "Products"
        ],
        "operationId": "UpdateProduct",
        "responses": {
          "200": {
            "$ref": "#/responses/ProductSuccessResp200"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/suppliers/": {
      "get": {
        "description": "For getting the list of all the suppliers, shows both active and inactive suppliers",
        "tags": [
          "Suppliers"
        ],
        "operationId": "GetSuppliers",
        "responses": {
          "200": {
            "$ref": "#/responses/SuccessRespSuppliers"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/suppliers/new": {
      "post": {
        "description": "For creating new supplier entry",
        "tags": [
          "Suppliers"
        ],
        "operationId": "CreateSupplier",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SupplierReq"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SupplierSuccessResp200"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/suppliers/{id}": {
      "get": {
        "description": "Gets the specific supplier of given supplier id",
        "tags": [
          "Suppliers"
        ],
        "operationId": "GetSupplierById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "description": "The id of the brands, categories, suppliers",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SupplierSuccessResp200"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "description": "For deleting existing supplier",
        "tags": [
          "Suppliers"
        ],
        "operationId": "DeleteSupplier",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "description": "The id of the brands, categories, suppliers",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteResponse"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "description": "Updates existing supplier entry",
        "tags": [
          "Suppliers"
        ],
        "operationId": "UpdateSupplier",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "description": "path id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SupplierReq"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SupplierSuccessResp200"
          },
          "500": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "BrandReq": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "status_id": {
          "type": "string",
          "x-go-name": "StatusId"
        }
      },
      "x-go-package": "github.com/fardinabir/product-store/models"
    },
    "BrandResp": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "status_id": {
          "type": "string",
          "x-go-name": "StatusId"
        }
      },
      "x-go-package": "github.com/fardinabir/product-store/models"
    },
    "CategoryNode": {
      "type": "object",
      "properties": {
        "category_name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryNode"
          },
          "x-go-name": "Children"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "github.com/fardinabir/product-store/models"
    },
    "CategoryReq": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "parent_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ParentId"
        },
        "status_id": {
          "type": "string",
          "x-go-name": "StatusId"
        }
      },
      "x-go-package": "github.com/fardinabir/product-store/models"
    },
    "CategoryResp": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "parent_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ParentId"
        },
        "sequence": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Sequence"
        },
        "status_id": {
          "type": "string",
          "x-go-name": "StatusId"
        }
      },
      "x-go-package": "github.com/fardinabir/product-store/models"
    },
    "ProductReq": {
      "type": "object",
      "properties": {
        "brands_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "BrandsID"
        },
        "categories_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CategoriesID"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "discount_price": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DiscountPrice"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "specifications": {
          "type": "string",
          "x-go-name": "Specifications"
        },
        "status_id": {
          "type": "string",
          "x-go-name": "StatusId"
        },
        "suppliers_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "SuppliersID"
        },
        "tags": {
          "type": "string",
          "x-go-name": "Tags"
        },
        "unit_price": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UnitPrice"
        }
      },
      "x-go-package": "github.com/fardinabir/product-store/models"
    },
    "ProductResp": {
      "type": "object",
      "properties": {
        "brand_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "BrandID"
        },
        "category_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CategoryID"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "discount_price": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DiscountPrice"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "specifications": {
          "type": "string",
          "x-go-name": "Specifications"
        },
        "status_id": {
          "type": "string",
          "x-go-name": "StatusId"
        },
        "supplier_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "SupplierID"
        },
        "tags": {
          "type": "string",
          "x-go-name": "Tags"
        },
        "unit_price": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UnitPrice"
        }
      },
      "x-go-package": "github.com/fardinabir/product-store/models"
    },
    "SupplierReq": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "is_verified_supplier": {
          "type": "boolean",
          "x-go-name": "IsVerifiedSupplier"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "phone": {
          "type": "string",
          "x-go-name": "Phone"
        },
        "status_id": {
          "type": "string",
          "x-go-name": "StatusId"
        }
      },
      "x-go-package": "github.com/fardinabir/product-store/models"
    },
    "SupplierResp": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "is_verified_supplier": {
          "type": "boolean",
          "x-go-name": "IsVerifiedSupplier"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "phone": {
          "type": "string",
          "x-go-name": "Phone"
        },
        "status_id": {
          "type": "string",
          "x-go-name": "StatusId"
        }
      },
      "x-go-package": "github.com/fardinabir/product-store/models"
    }
  },
  "responses": {
    "BrandSuccessResp200": {
      "description": "model for create brands success",
      "schema": {
        "$ref": "#/definitions/BrandResp"
      }
    },
    "CategorySuccessResp200": {
      "description": "model for create update categories success",
      "schema": {
        "$ref": "#/definitions/CategoryResp"
      }
    },
    "CategoryTreeResp": {
      "description": "category tree response",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/CategoryNode"
        }
      }
    },
    "DeleteResponse": {
      "description": "model for delete response",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Msg"
          }
        }
      }
    },
    "ErrorResponse": {
      "description": "model for error response",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Msg"
          }
        }
      }
    },
    "ProductSuccessResp200": {
      "description": "model for create update products success",
      "schema": {
        "$ref": "#/definitions/ProductResp"
      }
    },
    "SuccessRespBrands": {
      "description": "model for get brands success response",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/BrandResp"
        }
      }
    },
    "SuccessRespCategories": {
      "description": "model for get categories success response",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/CategoryResp"
        }
      }
    },
    "SuccessRespProducts": {
      "description": "model for get products success response",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ProductResp"
        }
      }
    },
    "SuccessRespSuppliers": {
      "description": "model for get suppliers success response",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/SupplierResp"
        }
      }
    },
    "SupplierSuccessResp200": {
      "description": "model for create update supplier success",
      "schema": {
        "$ref": "#/definitions/SupplierResp"
      }
    }
  }
}